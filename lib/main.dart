import 'dart:math';
import 'package:audioplayers/audioplayers.dart';
import 'package:biongoweb/bingo.dart';
import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const BingoPage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<int> calls = [];
  List<int> board = List.generate(75, (index) => index + 1);
  bool isPaused = false;
  bool isGameRunning = false;
  final AudioPlayer _player = AudioPlayer();

  bool isWinner(List<List<int>> card, List<int> calledNumbers) {
    int size = 5; // Bingo card is 5x5

    // Check rows
    for (int i = 0; i < size; i++) {
      // ignore: avoid_types_as_parameter_names
      if (card[i].every((num) => calledNumbers.contains(num))) {
        return true;
      }
    }

    // Check columns
    for (int col = 0; col < size; col++) {
      bool columnWin = true;
      for (int row = 0; row < size; row++) {
        if (!calledNumbers.contains(card[row][col])) {
          columnWin = false;
          break;
        }
      }
      if (columnWin) return true;
    }

    // Check main diagonal
    bool mainDiagonalWin = true;
    for (int i = 0; i < size; i++) {
      if (!calledNumbers.contains(card[i][i])) {
        mainDiagonalWin = false;
        break;
      }
    }
    if (mainDiagonalWin) return true;

    // Check secondary diagonal
    bool secondaryDiagonalWin = true;
    for (int i = 0; i < size; i++) {
      if (!calledNumbers.contains(card[i][size - 1 - i])) {
        secondaryDiagonalWin = false;
        break;
      }
    }
    if (secondaryDiagonalWin) return true;

    return false;
  }

  Future<void> callNumber(int number) async {
    String filePath = 'assets/audio/english/$number.mp3';
    await _player.play(UrlSource(filePath));
  }

  Future<void> callFunc() async {
    Random random = Random();

    while (board.isNotEmpty && !isPaused) {
      int randomIndex = random.nextInt(board.length);
      int randomNumber = board[randomIndex];
      board.removeAt(randomIndex);
      await callNumber(randomNumber);
      setState(() {
        calls.add(randomNumber);
      });
      await Future.delayed(Duration(seconds: 2));

      if (isPaused) {
        break;
      }
    }
  }

  void togglePauseResume() {
    setState(() {
      if (isPaused) {
        isPaused = false;
        callFunc();
      } else {
        isPaused = true;
      }
    });
  }

  TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Bingo Caller")),
      body: Column(
        children: [
          Row(
            children: [
              Expanded(
                // Allows TextField to take available space
                child: TextField(
                  controller: _controller,
                  keyboardType: TextInputType.number,
                  decoration: InputDecoration(
                    hintText: "Enter card number",
                  ),
                ),
              ),
              SizedBox(width: 10), // Add spacing
              ElevatedButton(
                onPressed: () {
                  if (_controller.text.isEmpty ||
                      int.tryParse(_controller.text) == null) {
                    print("Please enter a valid card number");
                    return;
                  }

                  int cardIndex = int.parse(_controller.text) - 1;
                  if (cardIndex < 0 || cardIndex >= bingoCards.length) {
                    print("Invalid card number");
                    return;
                  }

                  bool iWinner = isWinner(bingoCards[cardIndex], calls);
                  print("Winner: $iWinner");
                },
                child: Text("Check Bingo"),
              ),
            ],
          ),
          ElevatedButton(
            onPressed: () {
              if (!isGameRunning) {
                setState(() {
                  isGameRunning = true;
                });
                callFunc();
              }
              if (board.isEmpty) {
                setState(() {
                  board = List.generate(15, (index) => index + 1);
                });
                callFunc();
              }
            },
            child: Text("Start Calling Numbers"),
          ),
          ElevatedButton(
            onPressed: togglePauseResume,
            child: Text(isPaused ? "Resume" : "Pause"),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: calls.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(calls[index].toString()),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// class BingoCaller {

//   final AudioPlayer _player = AudioPlayer();
//   Future<void> callNumber(int number) async {
//     String filePath = 'assets/audio/english/$number.mp3';
//     if (isWeb()) {
//       await _player.play(UrlSource(filePath));
//     } else {
//       await _player.play(AssetSource(filePath));
//     }
//   }

//   Future<void> callFunc(List<int> calls) async {
//     List<int> board = List.generate(14, (index) => index + 1);
//     Random random = Random();

//     while (board.isNotEmpty) {
//       int randomIndex = random.nextInt(board.length);
//       int randomNumber = board[randomIndex];
//       board.removeAt(randomIndex);
//       calls.add(randomNumber);
//       await callNumber(randomNumber);
//       await Future.delayed(Duration(seconds: 2));
//     }
//   }

//   // A trick to detect if running on Web
//   bool isWeb() {
//     return identical(0, 0.0);
//   }
// }

final List<List<List<int>>> bingoCards = [
  [
    [3, 19, 39, 52, 70],
    [15, 28, 37, 55, 64],
    [6, 29, 0, 58, 66],
    [8, 25, 44, 49, 63],
    [13, 26, 40, 48, 75]
  ],
  [
    [3, 21, 34, 51, 73],
    [6, 28, 39, 54, 63],
    [1, 19, 0, 48, 75],
    [5, 17, 36, 57, 67],
    [14, 16, 45, 47, 72]
  ],
  [
    [5, 29, 42, 56, 75],
    [8, 22, 39, 50, 74],
    [11, 20, 0, 52, 73],
    [9, 19, 44, 46, 69],
    [2, 16, 38, 51, 64]
  ],
  [
    [4, 20, 39, 60, 62],
    [9, 28, 41, 51, 61],
    [5, 26, 0, 49, 69],
    [1, 30, 38, 58, 66],
    [8, 18, 33, 47, 74]
  ],
  [
    [4, 26, 42, 59, 65],
    [14, 25, 40, 54, 75],
    [15, 29, 0, 50, 69],
    [7, 20, 37, 48, 67],
    [10, 21, 35, 51, 62]
  ],
  [
    [1, 24, 33, 53, 68],
    [8, 30, 40, 57, 65],
    [4, 18, 0, 58, 61],
    [3, 20, 35, 56, 72],
    [6, 27, 41, 48, 74]
  ],
  [
    [5, 29, 38, 48, 69],
    [8, 24, 45, 52, 72],
    [11, 18, 0, 58, 71],
    [7, 21, 40, 46, 67],
    [13, 17, 42, 59, 63]
  ],
  [
    [14, 25, 39, 48, 69],
    [11, 22, 42, 59, 66],
    [7, 16, 0, 54, 73],
    [8, 24, 36, 58, 70],
    [2, 27, 38, 47, 64]
  ],
  [
    [12, 26, 41, 59, 69],
    [15, 20, 37, 57, 64],
    [13, 30, 0, 52, 75],
    [10, 24, 34, 54, 67],
    [2, 18, 35, 49, 63]
  ],
  [
    [1, 22, 36, 48, 67],
    [2, 24, 43, 52, 65],
    [14, 21, 0, 55, 73],
    [13, 23, 38, 56, 62],
    [7, 25, 45, 46, 72]
  ],
  [
    [2, 16, 40, 59, 68],
    [5, 26, 38, 58, 62],
    [15, 17, 0, 49, 74],
    [8, 21, 39, 47, 73],
    [7, 30, 32, 60, 66]
  ],
  [
    [14, 19, 45, 48, 71],
    [13, 21, 35, 57, 64],
    [4, 18, 0, 52, 65],
    [5, 28, 41, 59, 67],
    [8, 23, 32, 54, 63]
  ],
  [
    [10, 18, 43, 54, 75],
    [4, 30, 45, 47, 66],
    [9, 22, 0, 50, 61],
    [15, 19, 35, 56, 68],
    [13, 25, 33, 53, 72]
  ],
  [
    [10, 23, 35, 60, 66],
    [7, 24, 33, 46, 62],
    [1, 28, 0, 56, 67],
    [9, 19, 32, 50, 73],
    [13, 26, 31, 53, 68]
  ],
  [
    [13, 25, 37, 58, 73],
    [9, 28, 32, 54, 70],
    [4, 26, 0, 55, 69],
    [1, 23, 41, 46, 63],
    [10, 20, 43, 60, 67]
  ],
  [
    [7, 30, 39, 49, 73],
    [12, 28, 36, 54, 63],
    [2, 22, 0, 47, 72],
    [9, 23, 31, 57, 74],
    [6, 18, 43, 52, 64]
  ],
  [
    [8, 21, 32, 60, 66],
    [15, 28, 38, 47, 68],
    [12, 25, 0, 49, 71],
    [7, 24, 33, 48, 63],
    [2, 30, 40, 46, 69]
  ],
  [
    [2, 22, 40, 54, 62],
    [11, 27, 45, 59, 68],
    [14, 17, 0, 52, 67],
    [7, 16, 33, 48, 75],
    [13, 26, 42, 60, 72]
  ],
  [
    [2, 28, 37, 50, 62],
    [9, 22, 31, 52, 63],
    [13, 21, 0, 54, 73],
    [14, 29, 33, 51, 64],
    [10, 16, 32, 48, 75]
  ],
  [
    [10, 28, 38, 52, 61],
    [15, 23, 44, 51, 67],
    [2, 26, 0, 48, 66],
    [7, 20, 40, 46, 65],
    [11, 29, 36, 47, 71]
  ],
  [
    [2, 19, 41, 51, 71],
    [1, 21, 35, 60, 69],
    [7, 16, 0, 46, 62],
    [13, 22, 40, 48, 65],
    [4, 24, 32, 50, 70]
  ],
  [
    [5, 27, 42, 55, 63],
    [9, 28, 40, 48, 65],
    [8, 21, 0, 54, 74],
    [1, 19, 31, 52, 62],
    [10, 20, 37, 53, 71]
  ],
  [
    [6, 29, 34, 54, 65],
    [15, 21, 33, 56, 62],
    [1, 22, 0, 53, 61],
    [4, 24, 41, 50, 67],
    [14, 16, 45, 60, 64]
  ],
  [
    [14, 26, 33, 59, 66],
    [4, 28, 43, 56, 64],
    [9, 30, 0, 46, 62],
    [3, 27, 38, 60, 71],
    [6, 16, 31, 57, 70]
  ],
  [
    [6, 17, 41, 55, 73],
    [5, 22, 42, 48, 62],
    [11, 23, 0, 52, 74],
    [7, 18, 37, 58, 66],
    [3, 24, 32, 50, 61]
  ],
  [
    [4, 27, 44, 51, 72],
    [7, 18, 31, 50, 69],
    [14, 20, 0, 54, 75],
    [9, 26, 34, 48, 74],
    [15, 16, 45, 47, 73]
  ],
  [
    [13, 30, 43, 52, 74],
    [8, 23, 33, 57, 69],
    [5, 18, 0, 48, 68],
    [4, 19, 41, 53, 63],
    [14, 20, 40, 46, 61]
  ],
  [
    [9, 16, 35, 53, 71],
    [1, 19, 37, 54, 66],
    [13, 25, 0, 48, 69],
    [7, 26, 32, 49, 68],
    [5, 17, 33, 56, 72]
  ],
  [
    [14, 24, 38, 49, 74],
    [10, 26, 37, 48, 63],
    [13, 16, 0, 52, 61],
    [6, 27, 31, 56, 64],
    [12, 23, 41, 55, 66]
  ],
  [
    [6, 30, 33, 58, 71],
    [1, 21, 43, 57, 64],
    [8, 29, 0, 52, 61],
    [12, 20, 39, 54, 72],
    [4, 17, 31, 48, 66]
  ],
  [
    [4, 30, 35, 57, 61],
    [2, 17, 40, 48, 73],
    [13, 18, 0, 47, 66],
    [14, 19, 33, 56, 63],
    [12, 26, 42, 59, 71]
  ],
  [
    [11, 22, 33, 54, 71],
    [14, 29, 45, 57, 64],
    [15, 30, 0, 52, 62],
    [3, 17, 38, 49, 69],
    [7, 21, 34, 46, 75]
  ],
  [
    [11, 26, 31, 58, 66],
    [12, 17, 35, 46, 68],
    [13, 20, 0, 48, 64],
    [2, 22, 39, 55, 73],
    [14, 28, 42, 57, 74]
  ],
  [
    [11, 25, 32, 47, 74],
    [9, 20, 35, 51, 70],
    [14, 29, 0, 55, 63],
    [3, 16, 44, 53, 72],
    [12, 27, 33, 58, 61]
  ],
  [
    [13, 29, 33, 57, 69],
    [10, 28, 35, 53, 72],
    [4, 20, 0, 48, 67],
    [8, 18, 36, 49, 63],
    [3, 27, 42, 52, 66]
  ],
  [
    [5, 19, 42, 58, 66],
    [9, 24, 35, 47, 63],
    [12, 17, 0, 51, 72],
    [3, 26, 38, 46, 67],
    [7, 18, 40, 56, 69]
  ],
  [
    [7, 17, 42, 46, 63],
    [15, 18, 36, 50, 65],
    [8, 27, 0, 56, 71],
    [10, 19, 39, 59, 62],
    [9, 23, 37, 49, 64]
  ],
  [
    [1, 30, 35, 57, 63],
    [6, 29, 37, 55, 68],
    [15, 17, 0, 56, 66],
    [10, 27, 33, 47, 72],
    [14, 19, 42, 50, 69]
  ],
  [
    [5, 22, 33, 55, 65],
    [14, 20, 31, 54, 67],
    [13, 23, 0, 50, 72],
    [2, 30, 36, 57, 74],
    [15, 25, 39, 48, 68]
  ],
  [
    [2, 26, 45, 57, 70],
    [6, 20, 41, 49, 67],
    [9, 25, 0, 59, 64],
    [4, 16, 33, 47, 63],
    [10, 22, 42, 50, 68]
  ],
  [
    [10, 24, 40, 50, 69],
    [1, 30, 41, 54, 67],
    [5, 28, 0, 47, 71],
    [13, 21, 38, 48, 65],
    [3, 25, 31, 52, 64]
  ],
  [
    [14, 16, 34, 54, 64],
    [7, 25, 42, 46, 61],
    [9, 22, 0, 49, 62],
    [8, 27, 39, 57, 63],
    [11, 23, 33, 51, 65]
  ],
  [
    [15, 20, 34, 57, 74],
    [1, 17, 37, 47, 70],
    [3, 16, 0, 58, 75],
    [14, 28, 44, 48, 72],
    [12, 23, 42, 52, 69]
  ],
  [
    [2, 18, 45, 52, 62],
    [4, 22, 42, 56, 61],
    [15, 30, 0, 46, 63],
    [8, 19, 31, 58, 64],
    [13, 29, 36, 53, 65]
  ],
  [
    [14, 19, 45, 48, 63],
    [1, 27, 35, 57, 71],
    [11, 18, 0, 56, 70],
    [7, 21, 43, 51, 65],
    [10, 28, 37, 59, 69]
  ],
  [
    [12, 17, 38, 55, 65],
    [6, 21, 42, 60, 64],
    [11, 18, 0, 53, 71],
    [10, 25, 32, 58, 63],
    [2, 24, 36, 59, 75]
  ],
  [
    [5, 20, 45, 47, 75],
    [6, 18, 40, 55, 63],
    [4, 16, 0, 53, 66],
    [7, 27, 38, 51, 69],
    [10, 24, 37, 54, 64]
  ],
  [
    [6, 19, 39, 47, 65],
    [4, 16, 36, 55, 70],
    [3, 28, 0, 60, 74],
    [11, 30, 45, 48, 69],
    [8, 27, 41, 51, 73]
  ],
  [
    [8, 27, 42, 46, 75],
    [14, 28, 45, 59, 73],
    [13, 17, 0, 49, 62],
    [9, 22, 44, 60, 63],
    [3, 19, 31, 54, 72]
  ],
  [
    [4, 23, 31, 50, 62],
    [9, 28, 34, 49, 65],
    [14, 27, 0, 47, 71],
    [11, 24, 32, 46, 70],
    [7, 29, 38, 55, 67]
  ],
  [
    [13, 28, 39, 47, 63],
    [9, 24, 31, 57, 71],
    [10, 21, 0, 60, 64],
    [11, 23, 40, 58, 61],
    [15, 27, 35, 50, 70]
  ],
  [
    [2, 22, 41, 46, 74],
    [13, 28, 40, 57, 64],
    [10, 20, 0, 53, 62],
    [3, 21, 38, 52, 65],
    [7, 30, 43, 55, 70]
  ],
  [
    [10, 23, 42, 54, 64],
    [12, 30, 39, 57, 66],
    [8, 29, 0, 46, 69],
    [13, 16, 32, 60, 72],
    [7, 21, 33, 51, 70]
  ],
  [
    [12, 16, 39, 57, 75],
    [2, 20, 32, 56, 66],
    [7, 28, 0, 60, 71],
    [5, 21, 31, 47, 65],
    [1, 27, 43, 54, 62]
  ],
  [
    [1, 26, 42, 56, 68],
    [9, 19, 39, 48, 75],
    [12, 27, 0, 59, 71],
    [3, 30, 37, 47, 61],
    [7, 17, 32, 58, 66]
  ],
  [
    [9, 25, 42, 53, 61],
    [15, 28, 40, 47, 74],
    [8, 17, 0, 54, 65],
    [7, 29, 31, 52, 72],
    [10, 26, 41, 60, 66]
  ],
  [
    [2, 24, 34, 48, 63],
    [13, 23, 31, 52, 61],
    [8, 20, 0, 54, 70],
    [9, 30, 44, 46, 73],
    [12, 25, 42, 57, 64]
  ],
  [
    [8, 29, 34, 56, 66],
    [3, 30, 37, 47, 68],
    [12, 17, 0, 49, 69],
    [2, 16, 35, 59, 61],
    [7, 19, 36, 48, 75]
  ],
  [
    [7, 18, 41, 49, 65],
    [1, 26, 45, 60, 61],
    [15, 30, 0, 56, 68],
    [3, 27, 35, 54, 62],
    [14, 25, 40, 53, 64]
  ],
  [
    [7, 18, 39, 52, 70],
    [12, 30, 42, 53, 64],
    [15, 20, 0, 50, 66],
    [1, 27, 37, 60, 73],
    [8, 24, 38, 59, 68]
  ],
  [
    [2, 22, 45, 59, 61],
    [13, 25, 41, 51, 74],
    [15, 24, 0, 52, 71],
    [4, 28, 38, 47, 62],
    [11, 20, 40, 58, 65]
  ],
  [
    [11, 25, 44, 59, 68],
    [9, 24, 39, 46, 65],
    [4, 30, 0, 47, 74],
    [1, 16, 38, 51, 69],
    [15, 23, 42, 56, 62]
  ],
  [
    [12, 19, 32, 58, 65],
    [6, 24, 43, 57, 68],
    [14, 29, 0, 48, 62],
    [13, 17, 33, 50, 64],
    [11, 28, 45, 52, 63]
  ],
  [
    [15, 28, 41, 46, 65],
    [6, 20, 42, 49, 72],
    [8, 19, 0, 54, 61],
    [7, 22, 37, 48, 73],
    [14, 24, 40, 59, 68]
  ],
  [
    [8, 29, 37, 48, 66],
    [7, 17, 36, 46, 62],
    [14, 27, 0, 56, 74],
    [12, 22, 40, 53, 68],
    [1, 25, 31, 47, 75]
  ],
  [
    [2, 19, 44, 51, 71],
    [3, 21, 36, 47, 67],
    [15, 17, 0, 60, 69],
    [7, 29, 33, 48, 75],
    [4, 27, 42, 55, 66]
  ],
  [
    [6, 18, 41, 57, 73],
    [8, 30, 44, 51, 69],
    [9, 26, 0, 49, 70],
    [5, 28, 39, 56, 67],
    [10, 23, 32, 54, 75]
  ],
  [
    [2, 27, 36, 56, 61],
    [14, 24, 32, 59, 70],
    [13, 25, 0, 57, 74],
    [11, 29, 34, 53, 75],
    [15, 26, 43, 46, 66]
  ],
  [
    [9, 25, 34, 55, 69],
    [7, 20, 45, 58, 62],
    [10, 23, 0, 60, 64],
    [13, 28, 36, 53, 74],
    [6, 18, 38, 47, 63]
  ],
  [
    [4, 26, 38, 51, 72],
    [11, 25, 34, 60, 75],
    [2, 30, 0, 54, 69],
    [13, 17, 42, 59, 67],
    [14, 23, 39, 50, 68]
  ],
  [
    [7, 16, 42, 54, 63],
    [4, 30, 32, 52, 69],
    [5, 26, 0, 60, 73],
    [10, 23, 31, 51, 64],
    [15, 21, 33, 57, 65]
  ],
  [
    [7, 30, 45, 49, 61],
    [13, 23, 37, 53, 68],
    [5, 26, 0, 57, 74],
    [9, 22, 40, 52, 67],
    [2, 18, 38, 60, 70]
  ],
  [
    [11, 25, 33, 55, 71],
    [14, 18, 45, 60, 73],
    [9, 23, 0, 51, 63],
    [5, 26, 31, 47, 69],
    [12, 27, 44, 53, 72]
  ],
  [
    [3, 18, 40, 59, 63],
    [15, 20, 32, 56, 72],
    [12, 16, 0, 54, 69],
    [13, 24, 33, 51, 73],
    [9, 17, 31, 55, 64]
  ],
  [
    [11, 28, 40, 51, 68],
    [4, 24, 39, 46, 62],
    [3, 18, 0, 53, 64],
    [10, 26, 36, 59, 66],
    [15, 17, 32, 49, 65]
  ],
  [
    [9, 20, 38, 52, 68],
    [1, 29, 40, 47, 73],
    [5, 21, 0, 53, 65],
    [12, 23, 43, 57, 70],
    [14, 19, 41, 58, 62]
  ],
  [
    [3, 24, 38, 58, 72],
    [10, 16, 37, 54, 68],
    [9, 25, 0, 50, 62],
    [15, 27, 34, 52, 70],
    [2, 28, 31, 47, 66]
  ],
  [
    [2, 16, 45, 53, 61],
    [12, 24, 40, 59, 75],
    [9, 23, 0, 54, 69],
    [3, 19, 39, 47, 73],
    [4, 25, 43, 57, 64]
  ],
  [
    [8, 30, 39, 57, 73],
    [1, 24, 33, 48, 75],
    [2, 27, 0, 55, 69],
    [10, 20, 40, 49, 62],
    [6, 16, 34, 56, 72]
  ],
  [
    [4, 21, 33, 55, 67],
    [11, 17, 44, 46, 74],
    [10, 22, 0, 50, 68],
    [12, 24, 40, 60, 63],
    [6, 18, 37, 59, 70]
  ],
  [
    [14, 30, 36, 51, 67],
    [7, 24, 38, 59, 70],
    [3, 26, 0, 53, 63],
    [15, 27, 33, 56, 74],
    [10, 23, 40, 49, 64]
  ],
  [
    [11, 25, 39, 56, 73],
    [2, 18, 36, 54, 72],
    [4, 23, 0, 47, 61],
    [3, 28, 42, 57, 66],
    [5, 17, 33, 52, 71]
  ],
  [
    [1, 28, 36, 52, 63],
    [8, 26, 42, 53, 68],
    [11, 18, 0, 60, 65],
    [10, 30, 34, 59, 62],
    [15, 29, 37, 47, 69]
  ],
  [
    [5, 20, 42, 59, 75],
    [7, 22, 39, 48, 69],
    [15, 21, 0, 49, 62],
    [3, 26, 41, 55, 71],
    [4, 28, 36, 46, 65]
  ],
  [
    [6, 24, 32, 60, 74],
    [4, 19, 31, 55, 61],
    [11, 20, 0, 52, 64],
    [3, 29, 37, 53, 73],
    [14, 23, 42, 46, 65]
  ],
  [
    [13, 17, 41, 54, 64],
    [3, 26, 40, 53, 61],
    [9, 29, 0, 48, 72],
    [7, 20, 38, 46, 63],
    [10, 24, 35, 60, 62]
  ],
  [
    [8, 29, 37, 50, 69],
    [15, 24, 44, 56, 74],
    [14, 26, 0, 57, 68],
    [10, 16, 45, 46, 70],
    [9, 27, 38, 47, 72]
  ],
  [
    [1, 28, 33, 54, 62],
    [3, 17, 36, 51, 66],
    [10, 21, 0, 46, 68],
    [5, 27, 35, 48, 71],
    [6, 18, 41, 47, 69]
  ],
  [
    [12, 26, 45, 51, 61],
    [11, 25, 41, 49, 62],
    [14, 20, 0, 56, 74],
    [1, 22, 38, 58, 66],
    [10, 18, 42, 48, 75]
  ],
  [
    [7, 22, 38, 46, 71],
    [4, 19, 32, 60, 61],
    [2, 25, 0, 57, 62],
    [6, 18, 34, 47, 68],
    [11, 30, 33, 50, 74]
  ],
  [
    [3, 23, 42, 56, 62],
    [6, 16, 44, 52, 61],
    [13, 19, 0, 60, 70],
    [14, 20, 43, 59, 63],
    [2, 24, 34, 57, 73]
  ],
  [
    [10, 22, 44, 58, 66],
    [9, 28, 40, 51, 75],
    [4, 30, 0, 48, 63],
    [5, 27, 33, 52, 68],
    [6, 19, 32, 59, 71]
  ],
  [
    [3, 27, 41, 59, 70],
    [1, 20, 43, 56, 64],
    [14, 29, 0, 51, 67],
    [9, 30, 45, 52, 62],
    [7, 19, 32, 53, 72]
  ],
  [
    [8, 24, 36, 50, 74],
    [9, 16, 42, 53, 65],
    [6, 18, 0, 47, 68],
    [3, 26, 41, 55, 63],
    [12, 22, 31, 59, 61]
  ],
  [
    [9, 17, 35, 49, 74],
    [4, 28, 31, 51, 71],
    [3, 29, 0, 53, 67],
    [14, 18, 42, 58, 69],
    [12, 20, 44, 59, 65]
  ],
  [
    [7, 30, 36, 60, 67],
    [14, 23, 37, 56, 70],
    [1, 24, 0, 54, 61],
    [4, 22, 34, 48, 68],
    [3, 25, 35, 57, 63]
  ],
  [
    [6, 20, 34, 54, 71],
    [2, 30, 39, 52, 68],
    [12, 29, 0, 56, 63],
    [13, 18, 40, 47, 72],
    [15, 16, 42, 46, 73]
  ],
  [
    [13, 19, 39, 51, 70],
    [14, 23, 36, 49, 74],
    [11, 30, 0, 58, 61],
    [15, 17, 38, 50, 63],
    [6, 29, 41, 52, 66]
  ],
  [
    [9, 26, 39, 58, 67],
    [6, 25, 35, 46, 65],
    [8, 30, 0, 51, 74],
    [5, 29, 37, 59, 73],
    [2, 19, 34, 56, 64]
  ],
  [
    [12, 25, 33, 57, 61],
    [11, 20, 31, 55, 75],
    [15, 27, 0, 50, 66],
    [6, 23, 44, 52, 74],
    [7, 17, 38, 47, 70]
  ],
  [
    [4, 21, 42, 46, 61],
    [3, 27, 31, 52, 68],
    [15, 17, 0, 50, 73],
    [11, 20, 36, 48, 69],
    [10, 29, 35, 57, 71]
  ],
  [
    [7, 21, 31, 55, 67],
    [9, 23, 44, 46, 70],
    [6, 28, 0, 54, 75],
    [4, 26, 37, 57, 61],
    [2, 30, 33, 60, 63]
  ],
  [
    [6, 26, 36, 46, 72],
    [8, 17, 39, 50, 66],
    [15, 18, 0, 59, 61],
    [7, 29, 43, 55, 67],
    [13, 16, 42, 57, 71]
  ],
  [
    [13, 26, 40, 47, 63],
    [12, 23, 33, 48, 62],
    [4, 21, 0, 57, 73],
    [2, 28, 35, 56, 65],
    [6, 25, 32, 55, 70]
  ],
  [
    [13, 20, 31, 48, 75],
    [12, 26, 44, 59, 71],
    [1, 16, 0, 46, 68],
    [2, 19, 35, 56, 72],
    [3, 17, 37, 54, 61]
  ],
  [
    [4, 16, 36, 50, 63],
    [14, 21, 40, 54, 73],
    [6, 19, 0, 49, 67],
    [5, 18, 45, 52, 72],
    [3, 28, 42, 46, 66]
  ],
  [
    [4, 27, 42, 51, 66],
    [15, 24, 43, 46, 70],
    [14, 22, 0, 60, 64],
    [1, 23, 40, 59, 72],
    [10, 17, 32, 50, 67]
  ],
  [
    [11, 16, 41, 48, 69],
    [13, 29, 43, 54, 73],
    [15, 27, 0, 53, 65],
    [1, 21, 44, 50, 61],
    [3, 28, 42, 57, 68]
  ],
  [
    [12, 21, 31, 46, 68],
    [14, 28, 35, 58, 65],
    [8, 19, 0, 47, 75],
    [1, 20, 34, 50, 67],
    [11, 24, 36, 49, 71]
  ],
  [
    [13, 20, 33, 51, 68],
    [6, 17, 31, 47, 66],
    [10, 27, 0, 48, 72],
    [12, 30, 36, 46, 65],
    [8, 24, 40, 50, 63]
  ],
  [
    [13, 20, 43, 58, 68],
    [15, 21, 35, 52, 71],
    [7, 26, 0, 47, 73],
    [3, 27, 32, 56, 72],
    [5, 19, 31, 46, 63]
  ],
  [
    [11, 20, 35, 50, 63],
    [8, 21, 36, 59, 75],
    [6, 17, 0, 54, 66],
    [5, 26, 39, 48, 65],
    [1, 19, 34, 60, 64]
  ],
  [
    [15, 29, 33, 58, 69],
    [5, 30, 38, 46, 68],
    [7, 18, 0, 55, 70],
    [14, 28, 44, 50, 71],
    [13, 20, 41, 51, 63]
  ],
  [
    [7, 16, 44, 48, 74],
    [10, 17, 41, 59, 70],
    [3, 23, 0, 58, 63],
    [11, 18, 33, 46, 69],
    [14, 27, 36, 60, 68]
  ],
  [
    [2, 17, 32, 55, 62],
    [6, 28, 42, 46, 61],
    [4, 29, 0, 52, 63],
    [15, 16, 35, 49, 72],
    [5, 25, 31, 60, 75]
  ],
  [
    [3, 22, 41, 50, 63],
    [9, 16, 35, 58, 75],
    [8, 18, 0, 56, 73],
    [5, 19, 44, 57, 69],
    [10, 28, 36, 48, 62]
  ],
  [
    [8, 25, 35, 54, 72],
    [11, 23, 31, 59, 64],
    [10, 17, 0, 48, 68],
    [9, 16, 37, 50, 62],
    [1, 22, 36, 57, 73]
  ],
  [
    [4, 21, 31, 46, 61],
    [8, 30, 34, 51, 75],
    [9, 29, 0, 55, 73],
    [14, 19, 32, 57, 74],
    [3, 16, 40, 47, 71]
  ],
  [
    [6, 16, 41, 59, 65],
    [11, 27, 32, 57, 73],
    [3, 21, 0, 51, 63],
    [8, 22, 45, 49, 72],
    [2, 25, 35, 55, 70]
  ],
  [
    [12, 27, 45, 52, 68],
    [2, 30, 42, 59, 64],
    [1, 22, 0, 46, 63],
    [8, 16, 32, 60, 71],
    [15, 23, 38, 51, 70]
  ]
];
